@page "/usermainpage"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Syncfusion.Blazor.Notifications

@inject ProtectedLocalStorage LocalStorage
@inject IUsuarioService UsuarioService
@inject NavigationManager NavigationManager

@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Buttons
<h3>Zona de usuario</h3>
<div class="grid-container">
    <SfCard ID="PersonalData" @onclick="@(()=>NavigationManager.NavigateTo("/usermainpage/data"))">
        <CardHeader Title="📒 Datos personales" />
    </SfCard>
    <SfCard ID="Pedidos" @onclick="@(()=>NavigationManager.NavigateTo("/usermainpage/pedidos"))">
        <CardHeader Title="🚚 Mis pedidos" />
    </SfCard>
    <SfCard ID="Logout" @onclick="@(e => cerrarSesion())">
        <CardHeader Title="❌ Cerrar sesión" />
    </SfCard>
    @* Si existe y NO es un cliente...  Es un administrador *@
    @if (storedUser != null && storedUser.Rol != UsuarioService.GetRoles().First())
    {
        <SfCard ID="Admin" @onclick="@(()=>NavigationManager.NavigateTo("/admin"))">
            <CardHeader Title="⚙ Administración del sitio" />
        </SfCard>
    }
</div>
<style>
    .grid-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 20px;
    }

    .e-card {
        height: 150px;
        width: 300px;
        margin: 16px;
        font-size: 30px;
        font-weight: bold;
    }

    .e-card-header-caption .e-card-header-title {
        text-align: center;
        font-family: Helvetica, 'Segoe UI';
    }
</style>

@code {
    private Usuario storedUser { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await InicializarUsuario();
    }

    protected async Task InicializarUsuario()
    {
        await Task.Delay(800);
        var result = await LocalStorage.GetAsync<string>("user");
        await Task.Delay(500);
        var storedUserEmail = result.Success ? result.Value : null;
        if (storedUserEmail != null) storedUser = await UsuarioService.ReadUserbyEmail(storedUserEmail);
    }

    public async Task cerrarSesion()
    {
        await LocalStorage.DeleteAsync("user");

        NavigationManager.NavigateTo("", forceLoad: true);
    }
}

@page "/usermainpage/pedidos"

@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Spinner
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using TFG2022Server.Data
@using TFG2022Server.Extensions
@using System.IO;
@using TFG2022Server.Pages.Components

@inject NavigationManager NavigationManager
@inject ProtectedLocalStorage LocalStorage
@inject IUsuarioService UsuarioService
@inject IPedidoService PedidoService
@inject ILineaPedidoService LineaPedidoService
@inject IProductoService ProductoService

<SfButton @onclick="@(()=>NavigationManager.NavigateTo("/usermainpage"))"> ⬅ Volver a mi perfil</SfButton>

<h3>Mis pedidos</h3>

<div>
    <SfGrid @ref="@Grid" DataSource="pedidoData" AllowPaging="true" AllowSorting="true" AllowFiltering="true" AllowGrouping="true" AllowSelection="true">
        <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
        <GridEditSettings AllowAdding="false" AllowEditing="false" AllowDeleting="false"></GridEditSettings>
        <GridEvents RowSelected="GetSelectedRecords" TValue="PedidoModel"></GridEvents>
        <GridPageSettings PageSize="15"></GridPageSettings>
        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
        <GridColumns>
            <GridColumn IsPrimaryKey="true" Field="@nameof(PedidoModel.PedidoId)"></GridColumn>
            <GridColumn Field="@nameof(PedidoModel.FechaPedido)" Format="d"></GridColumn>
            <GridColumn Field="@nameof(PedidoModel.EstadoPedido)"></GridColumn>
            <GridColumn Field="@nameof(PedidoModel.PrecioTotal)"></GridColumn>
        </GridColumns>
        <SfSpinner @bind-Visible="@VisibleSpinner"></SfSpinner>
    </SfGrid>
</div>

@if (productosData != null)
{
    <table class="styled-table">
        <thead>
            <tr>
                <th>Producto</th>
                <th>Cantidad</th>
                <th>Precio</th>
                <th>Total</th>

            </tr>
        </thead>
        <tbody>
            @foreach (LineaPedidoModel lpm in lineaPedidoData)
                @foreach (Producto prod in productosData)
                {
                    if (lpm.ProductoLineaPedido == prod.ProductoId)
                    {
                        <tr>
                            <td>
                                <img src="@prod.UrlImagen" height="40"> <text style="text-overflow: ellipsis">@prod.Nombre</text>
                            </td>
                            <td>
                                <text>@lpm.Cantidad</text>
                            </td>
                            <td>
                                <text>@prod.Precio</text>
                            </td>
                            <td>
                                <text> @lpm.PrecioFinal €</text>
                            </td>
                        </tr>
                    }
                }
        </tbody>
    </table>
    <ExportFacturaButton pedido="@SelectedPedido.Convert()"></ExportFacturaButton>
}

<style>
    .styled-table {
        border-collapse: collapse;
        margin: 25px 0;
        font-size: 0.9em;
        font-family: sans-serif;
        min-width: 400px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.15);
        background-color: white;
    }

        .styled-table thead tr {
            background-color: #009879;
            color: #ffffff;
            text-align: left;
        }

        .styled-table th,
        .styled-table td {
            padding: 12px 15px;
            max-width: 0;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        .styled-table tbody tr {
            border-bottom: 1px solid #dddddd;
        }

            .styled-table tbody tr:nth-of-type(even) {
                background-color: #f3f3f3;
            }

            .styled-table tbody tr:nth-of-type(odd) {
                background-color: white;
            }

            .styled-table tbody tr:last-of-type {
                border-bottom: 2px solid #009879;
            }
</style>

@code {
    SfGrid<PedidoModel> Grid;
    private Usuario storedUser { get; set; }
    private List<PedidoModel>? pedidoData = null;
    private List<object> toolbar = new List<object> { };
    private bool VisibleSpinner { get; set; } = false;
    private int SelectedPedidoId { get; set; }
    private PedidoModel SelectedPedido { get; set; }

    private List<LineaPedidoModel>? lineaPedidoData { get; set; }
    private List<Producto>? productosData { get; set; }

    protected override async Task OnInitializedAsync()
    {
        VisibleSpinner = true;
        await InicializarUsuario();
        pedidoData = await PedidoService.GetPedidosFromUser(storedUser.UsuarioId);
        VisibleSpinner = false;
    }
    protected async Task InicializarUsuario()
    {
        var result = await LocalStorage.GetAsync<string>("user");
        var storedUserEmail = result.Success ? result.Value : null;
        if (storedUserEmail != null) storedUser = await UsuarioService.ReadUserbyEmail(storedUserEmail);
        else NavigationManager.NavigateTo("/login");

    }
    private async Task GetSelectedRecords(RowSelectEventArgs<PedidoModel> args)
    {
        SelectedPedido = Grid.DataSource.ElementAt((int)(await this.Grid.GetSelectedRowIndexesAsync()).First());
        SelectedPedidoId = SelectedPedido.PedidoId;
        lineaPedidoData = (await LineaPedidoService.GetLineaPedidos()).FindAll(e => e.PedidoLineaPedido == SelectedPedidoId);
        productosData = await lineasPedidoToProductos(lineaPedidoData);
    }
    private async Task<string> LineaPedidoToProduct(LineaPedidoModel lineaPed)
    {
        return (await ProductoService.GetProducto(lineaPed.ProductoLineaPedido)).Nombre;
    }

    private async Task<List<Producto>> lineasPedidoToProductos(List<LineaPedidoModel> lineas)
    {
        var allProds = await ProductoService.GetProductos();
        var result = new List<Producto>();
        foreach (var linea in lineas)
        {
            result.Add(await ProductoService.GetProducto(linea.ProductoLineaPedido));
        }
        return result;
    }
}

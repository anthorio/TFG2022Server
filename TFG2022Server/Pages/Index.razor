@page "/"
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Lists
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Navigations
@using System.Globalization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject NavigationManager NavigationManager
@inject IProductoService ProductoService
@inject IUsuarioService UsuarioManagementService
@inject IPedidoService PedidoService
@inject IFamiliaProductoService FamiliaProductoService
@inject ICarritoService CarritoService
@inject ILineaCarritoService LineaCarritoService
@inject ProtectedLocalStorage LocalStorage
@inject IUsuarioService UsuarioService

<div class="col-lg-4 control-section">
    <SfToast @ref="ToastObj" ID="toast_type">
        <ToastPosition X="@ToastPosition"></ToastPosition>
    </SfToast>
</div>

<SfTab @bind-SelectedItem="SelectedTab">
    <TabItems>
        <TabItem>
            <ChildContent>
                <TabHeader Text="Catálogo General"></TabHeader>
            </ChildContent>
            <ContentTemplate>

                @* Grid de productos *@
                @if (ProductoData == null || this.ProductoData.Count == 0)
                {
                    <div class="e-error">
                        <div class="e-error-content">No results found.</div>
                    </div>
                }
                else
                {
                    <div class="grid-container">
                        @foreach (ProductoModel producto in ProductoData)
                        {

                            <SfCard CssClass="e-card">
                                <CardImage Image="@producto.UrlImagen" />
                                <CardHeader Title="@producto.Nombre" SubTitle="@priceToString(@producto.Precio)" />
                                <CardContent Content="@producto.Descripcion" />
                                <CardFooter>
                                    <CardFooterContent>
                                        <SfButton class="e-btn e-outline e-primary" @onclick="@(()=>NavigationManager.NavigateTo("/product/"+@producto.ProductoId))">🔎 Ver producto</SfButton>
                                        <SfButton class="e-btn e-outline e-primary" @onclick="@(e => addToCarrito(@producto))">🛒 Añadir al carrito</SfButton>
                                    </CardFooterContent>
                                </CardFooter>
                            </SfCard>
                        }
                    </div>
                }


            </ContentTemplate>
        </TabItem>

        @* Tabs de familia *@
        @if (FamiliaData == null || this.FamiliaData.Count == 0)
        {
            <div class="e-error">
                <div class="e-error-content">No results found.</div>
            </div>
        }
        else
        {
            @foreach (FamiliaProductoModel familiap in FamiliaData)
            {
                <TabItem>
                    <ChildContent>
                        <TabHeader Text="@familiap.Nombre"></TabHeader>
                    </ChildContent>
                    <ContentTemplate>

                        @* Grid de productos *@
                        @if (ProductoData == null || this.ProductoData.Count == 0)
                        {
                            <div class="e-error">
                                <div class="e-error-content">No results found.</div>
                            </div>
                        }
                        else
                        {
                            <div class="grid-container">
                                @foreach (ProductoModel producto in filtrarProductos(familiap))
                                {

                                    <SfCard CssClass="e-card">
                                        <CardImage Image="@producto.UrlImagen" />
                                        <CardHeader Title="@producto.Nombre" SubTitle="@priceToString(@producto.Precio)" />
                                        <CardContent Content="@producto.Descripcion" />
                                        <CardFooter>
                                            <CardFooterContent>
                                                <SfButton class="e-btn e-outline e-primary" @onclick="@(()=>NavigationManager.NavigateTo("/product/"+@producto.ProductoId))">🔎 Ver producto</SfButton>
                                                <SfButton class="e-btn e-outline e-primary" @onclick="@(e => addToCarrito(@producto))">🛒 Añadir al carrito</SfButton>
                                            </CardFooterContent>
                                        </CardFooter>
                                    </SfCard>
                                }
                            </div>
                        }
                    </ContentTemplate>
                </TabItem>
            }           }
    </TabItems>
</SfTab>

<style>
    .listview-template {
        border-radius: 2px;
        height: 470px;
        box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);
        padding: 20px;
    }

    .img-class {
        height: 90px;
        width: 150px;
    }

    .usuario-combo, .filter-text, .listview-template {
        max-width: 800px;
    }

    /*Grid Related*/
    .grid-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 20px;
    }

    /*Card Related*/
    .e-card {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 350px;
        width: 100%;
        margin: auto;
    }

    .e-card-image {
        height: 180px;
        width: 150px;
    }

    .e-card-header-caption .e-card-header-title {
        font-size: 20px;
        font-family: Helvetica, 'Segoe UI';
        font-weight: bold;
    }

    .e-card-content {
        text-overflow: ellipsis;
        overflow: hidden;
        height: 50px;
    }

    /*Toast Related*/
    @@font-face {
        font-family: 'Toast_icons';
        src: url(data:application/x-font-ttf;charset=utf-8;base64,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) format('truetype');
        font-weight: normal;
        font-style: normal;
    }

    #toast_types button {
        margin: 5px;
        min-width: 160px;
        max-width: 160px;
    }

    .toast-icons {
        font-family: 'Toast_icons' !important;
        speak: none;
        font-size: 55px;
        font-style: normal;
        font-weight: normal;
        font-variant: normal;
        text-transform: none;
        line-height: 1;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }

    #toast_type .e-toast-icon.e-icons {
        height: auto;
        font-size: 30px;
    }

    .bootstrap5 #toast_type .e-toast-icon.e-icons,
    .bootstrap5-dark #toast_type .e-toast-icon.e-icons {
        height: 25px;
    }

    .toast-icons.e-success::before {
        content: "\e701";
    }

    .toast-icons.e-error::before {
        content: "\e700";
    }

    .toast-icons.e-info::before {
        content: "\e704";
    }

    .toast-icons.e-warning::before {
        content: "\e703";
    }

    #toast_types {
        text-align: center;
    }

</style>

@code {
    private SfListView<ProductoModel> SfSelectedProductos { get; set; }

    private List<ProductoModel>? ProductoData { get; set; }
    private List<ProductoModel>? ProductoDataFiltradoBuscador { get; set; }
    private List<UsuarioModel>? UsuarioData { get; set; }
    private List<FamiliaProductoModel>? FamiliaData { get; set; }
    private int SelectedUsuarioId { get; set; } = 1;
    private int SelectedTab = 0;

    string storedUserEmail = "";
    Usuario storedUser=null;

    private SfToast? ToastObj;
    private string ToastPosition = "Right";
    private List<ToastModel> Toast = new List<ToastModel>
    {
        new ToastModel{ Title = "Error", Content="Hubo un problema al añadir el producto al carrito", CssClass="e-toast-danger", Icon="e-error toast-icons" },
        new ToastModel{ Title = "Éxito", Content="El producto se añadió al carrito", CssClass="e-toast-success", Icon="e-success toast-icons" },
        new ToastModel{ Title = "Warning!", Content="There was a problem with your network connection.", CssClass="e-toast-warning", Icon="e-warning toast-icons" },
        new ToastModel{ Title = "Information!", Content="Please read the comments carefully.", CssClass="e-toast-info", Icon="e-info toast-icons" }
    };

    protected override async Task OnInitializedAsync()
    {
        FamiliaData = await FamiliaProductoService.GetFamiliaProductos();
        ProductoData = await ProductoService.GetProductos();
        UsuarioData = await UsuarioManagementService.GetUsuarios();
        @* La diferencia entre GetUsuarios y GetAllUsuarios es que Get Usuarios utiliza el contexto. *@
    }
    @*
    void OnInput(InputEventArgs eventArgs)
    {
        esto ta regular, ignorar
        if (eventArgs.Value != "")
        {
            ProductoData = ProductoDataFiltradoBuscador.FindAll(e => e.Nombre.ToLower().Contains(eventArgs.Value.ToLower()));
        }
        else
        {
            ProductoData = ProductoDataFiltradoBuscador;
        }
    }*@

    protected async Task CreatePedido()
    {
        try
        {
            SelectedItems<ProductoModel> productosPedidos = await SfSelectedProductos.GetCheckedItemsAsync();
            if (productosPedidos.Data.Count() > 0)
            {

                List<LineaPedido> lineasPedido = (from p in productosPedidos.Data
                                                  select new LineaPedido
                                                      {
                                                          ProductoLineaPedido = p.ProductoId,
                                                          PrecioFinal = p.Precio,
                                                          Cantidad = p.Cantidad

                                                      }).ToList();
                PedidoModel pedidoModel = new PedidoModel
                    {
                        UsuarioPedido = SelectedUsuarioId,
                        LineasPedido = lineasPedido,
                        FechaPedido = DateTime.Now,
                        EstadoPedido = "estado",
                        TipoEnvio = "tipo"
                    };
                await PedidoService.CreatePedido(pedidoModel);
                await this.ToastObj.ShowAsync(Toast[1]);
            }
        }
        catch (Exception)
        {
            await this.ToastObj.ShowAsync(Toast[2]);
            // throw;   si mostramos el error, comentamos esto
        }
    }

    private string priceToString(double precio)
    {
        return precio.ToString() + " €";
    }

    public async Task addToCarrito(ProductoModel producto)
    {
        try
        {

            if (producto != null)
            {

                if (storedUserEmail == null || storedUser==null)
                {
                    var result = await LocalStorage.GetAsync<string>("user");
                    await Task.Delay(500);
                    storedUserEmail = result.Success ? result.Value : null;
                    storedUser = await UsuarioService.ReadUserbyEmail(storedUserEmail);
                }
                

                var carritoUsario = await CarritoService.GetCarritoByUser(storedUser.UsuarioId);
                LineaCarritoModel lineaCarritoModel = new LineaCarritoModel
                    {
                        CarritoLineaCarrito = carritoUsario.CarritoId,
                        ProductoLineaCarrito = producto.ProductoId,
                        Cantidad = 1
                    };

                await LineaCarritoService.AnadirLinea(lineaCarritoModel);
                await this.ToastObj.ShowAsync(Toast[1]);
            }
        }
        catch (Exception)
        {
            await this.ToastObj.ShowAsync(Toast[0]);
        }
    }

    public async Task testCall()
    {
        await this.ToastObj.ShowAsync(Toast[2]);
    }

    private List<ProductoModel> filtrarProductos(FamiliaProductoModel familiaP)
    {
        return ProductoData.FindAll(e => e.FamiliaProductoProducto.Equals(familiaP.FamiliaID));
    }

    protected async Task InicializarUsuario()
    {
        await Task.Delay(2000);
        var result = await LocalStorage.GetAsync<string>("user");
        await Task.Delay(2000);
        storedUserEmail = result.Success ? result.Value : null;
        if (storedUserEmail != null) storedUser = await UsuarioService.ReadUserbyEmail(storedUserEmail);
    }
}

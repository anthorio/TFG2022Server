@page "/compra"

@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Grids
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using TFG2022Server.Pages.Components
@using Syncfusion.Blazor.Buttons
@using TFG2022Server.Data
@using TFG2022Server.Extensions
@using System.IO;

@inject ProtectedLocalStorage LocalStorage
@inject NavigationManager NavigationManager
@inject ILineaCarritoService LineaCarritoService
@inject ICarritoService CarritoService
@inject IProductoService ProductoService
@inject IUsuarioService UsuarioService
@inject IPedidoService PedidoService
@inject ExportService exportService
@inject Microsoft.JSInterop.IJSRuntime JS

<h3>PasareladeCompra</h3>

@if (@waitForUser() == null)
{
    NavigationManager.NavigateTo("", forceLoad: true);
}
else
{
    <div class="float-container">
        <div class="float-child">
            <SfCard CssClass="@((step==1? "e-card-step" : "e-card"))">
                <CardHeader Title="Paso 1" SubTitle="Repasa la compra" />
                <CardContent Content="Selecciona la zona de envío" />
            </SfCard>
        </div>
        <div class="float-child">
            <SfCard CssClass="@((step==2? "e-card-step" : "e-card"))">
                <CardHeader Title="Paso 2" SubTitle="Realiza el pago" />
                <CardContent Content="Selecciona tu método de pago preferido" />
            </SfCard>
        </div>
        <div class="float-child">
            <SfCard CssClass="@((step==3? "e-card-step" : "e-card"))">
                <CardHeader Title="Paso 3" SubTitle="Resumen de la compra realizada" />
                <CardContent Content="" />
            </SfCard>
        </div>
    </div>

    @if (step == 1)
    {

        @if (@listaProductosCarrito != null)
        {
            <table class="styled-table">
                <thead>
                    <tr>
                        <th>Tu carrito</th>
                        <th>Precio /ud.</th>
                        <th>Cantidad</th>
                        <th>Descuento</th>
                        <th>Importe total (IVA incluido)</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (ProductoModel producto in listaProductosCarrito)
                    {
                        <tr>
                            <td>
                                <img src="@producto.UrlImagen" height="40"> <text style="text-overflow: ellipsis">@producto.Nombre</text>
                            </td>
                            <td>@producto.Precio €</td>
                            <td>
                                <div>@cantidadDeProducto(@producto, @filteredLineaCarritoData)</div>
                                <div style="text-align: center">
                                    <CascadingValue Value="this"><LineaCarritoIncrease producto="@producto" carrito="@idCarrito" listaLineas="@filteredLineaCarritoData" /></CascadingValue>
                                    <CascadingValue Value="this"><LineaCarritoDecrease producto="@producto" carrito="@idCarrito" listaLineas="@filteredLineaCarritoData" /></CascadingValue>
                                    <CascadingValue Value="this"><LineaCarritoRemove producto="@producto" carrito="@idCarrito" listaLineas="@filteredLineaCarritoData" /></CascadingValue>
                                </div>
                            </td>
                            <td>@user.Descuento %</td>
                            <td>@totalProducto(@producto.Precio,@user.Descuento,@cantidadDeProducto(@producto, @filteredLineaCarritoData)) €</td>
                        </tr>
                    }
                </tbody>
            </table>
        }

        <hr />


        <h4>Envío </h4>
        <p>Comprueba que la dirección es la deseada.</p>
        <p>Si quieres modificar tu dirección, deberás modificarla en <a href="https://example.com">tu perfil</a></p>

        @if (@user != null)
        {
            <table class="styled-table">
                <tbody>
                    <tr>
                        <td>Nombre</td>
                        <td>@user.Nombre</td>
                    </tr>
                    <tr>
                        <td>Apellidos</td>
                        <td>@user.Apellidos</td>
                    </tr>
                    <tr>
                        <td>Email</td>
                        <td>@user.Email</td>
                    </tr>
                    <tr>
                        <td>Teléfono</td>
                        <td>@user.Telefono</td>
                    </tr>
                    <tr>
                        <td>DNI</td>
                        <td>@user.Dni</td>
                    </tr>
                    <tr>
                        <td>Direccion de entrega</td>
                        <td>@user.Direccion</td>
                    </tr>
                    <tr>
                        <td>Código Postal</td>
                        <td>@user.CodigoPostal</td>
                    </tr>
                    <tr>
                        <td>Población</td>
                        <td>@user.Poblacion</td>
                    </tr>
                </tbody>
            </table>

        }
        <hr />
        <div class="control-section">
            <div class="checkbox-control">
                @if (alertThatHasntAcceptCondiciones)
                {
                    <p style="color:red">Esta casilla no está marcada.</p>
                }
                <SfCheckBox @bind-Checked="@acceptCondiciones">Acepto las Condiciones generales de compra.</SfCheckBox>
            </div>
        </div>
    }
    else if (step == 2)
    {
        <h3>Datos de pago</h3>
        <p>Cumpliendo con la nueva Directiva de Pagos Europea (PSD2), tu banco podrá pedirte alguna validación adicional a la que vienes haciendo en tus compras online.</p>

        <div class="control-section">
            <div class="radio-control">
                <h3>Seleccione medio de pago</h3>
                <div class="row">
                    <SfRadioButton Label="Otras tarjetas" Name="payment" Value="tarjetas" @bind-Checked="@metodoDePago"></SfRadioButton>
                </div>
                <div class="row">
                    <SfRadioButton Label="PayPal" Name="payment" Value="paypal" @bind-Checked="@metodoDePago"></SfRadioButton>
                </div>
                <div class="row">
                    <SfRadioButton Label="Bizum" Name="payment" Value="bizum" @bind-Checked="@metodoDePago"></SfRadioButton>
                </div>
            </div>
        </div>
    }
    else if (step == 3 && newPedido.UsuarioPedido == user.UsuarioId)
    {
        <p>Gracias por comprar en Suministros Nerja. A continuación ofrecemos un resumen con los detalles de tu pedido.</p>
        <table class="styled-table">
            <tbody>
                <tr>
                    <td>ID del pedido</td>
                    <td>@newPedido.PedidoId</td>
                </tr>
                <tr>
                    <td>Fecha de compra</td>
                    <td>@newPedido.FechaPedido</td>
                </tr>
                <tr>
                    <td>Importe</td>
                    <td>@Math.Round(newPedido.PrecioTotal-PedidoService.GetCosteEnvio(), 2)</td>
                </tr>
                <tr>
                    <td>Gastos de envío</td>
                    <td>@PedidoService.GetCosteEnvio()</td>
                </tr>
                <tr>
                    <td>Total</td>
                    <td>@Math.Round(newPedido.PrecioTotal, 2)</td>
                </tr>
            </tbody>
        </table>

        <p>Dirección de envío:</p>
        <table class="styled-table">
            <tbody>
                <tr>
                    <td>Nombre</td>
                    <td>@user.Nombre</td>
                </tr>
                <tr>
                    <td>Apellidos</td>
                    <td>@user.Apellidos</td>
                </tr>
                <tr>
                    <td>Email</td>
                    <td>@user.Email</td>
                </tr>
                <tr>
                    <td>Teléfono</td>
                    <td>@user.Telefono</td>
                </tr>
                <tr>
                    <td>DNI</td>
                    <td>@user.Dni</td>
                </tr>
                <tr>
                    <td>Direccion de entrega</td>
                    <td>@user.Direccion</td>
                </tr>
                <tr>
                    <td>Código Postal</td>
                    <td>@user.CodigoPostal</td>
                </tr>
                <tr>
                    <td>Población</td>
                    <td>@user.Poblacion</td>
                </tr>
            </tbody>
        </table>
        <div>
            <SfButton @onclick="@ExportToPdf">Imprimir justificante</SfButton>
        </div>
        <div>
            <SfButton @onclick="@(()=>NavigationManager.NavigateTo(""))">Volver y seguir comprando</SfButton>
        </div>
    }
    @if (step != 3)
    {
        <hr />
        <table class="styled-table">
            <thead>
                <tr>
                    <th>Total</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                        Subtotal
                    </td>
                    <td>
                        @totalCarrito()
                    </td>
                </tr>
                <tr>
                    <td>
                        Envío
                    </td>
                    <td>
                        @PedidoService.GetCosteEnvio()
                    </td>
                </tr>
                <tr>
                    <td>
                        Total con envío
                    </td>
                    <td>
                        @totalPedido()
                    </td>
                </tr>
            </tbody>
        </table>
        <hr />
    }
    @if (step == 1)
    {
        <div class="float-container">
            <div class="float-child">
                <SfButton @onclick="@(()=>NavigationManager.NavigateTo(""))">Seguir comprando</SfButton>
            </div>
            <div class="float-child">
                <SfButton IsPrimary="true" CssClass="e-outline" @onclick="goToStep2" Disabled=@pedidoVacio>Continuar con el pedido</SfButton>
            </div>
        </div>
    }
    else if (step == 2)
    {
        <div class="float-container">
            <div class="float-child">
                <SfButton @onclick="@(()=>NavigationManager.NavigateTo(""))">Volver y seguir comprando</SfButton>
            </div>
            <div class="float-child">
                <SfButton IsPrimary="true" CssClass="e-outline" @onclick="goToStep3"  Disabled=@(@metodoDePago=="")>Terminar y pagar</SfButton>
            </div>
        </div>
    }
}

<style>

    .styled-table {
        border-collapse: collapse;
        margin: 25px 0;
        font-size: 0.9em;
        font-family: sans-serif;
        min-width: 400px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.15);
        background-color: white;
    }

        .styled-table thead tr {
            background-color: #009879;
            color: #ffffff;
            text-align: left;
        }

        .styled-table th,
        .styled-table td {
            padding: 12px 15px;
            max-width: 0;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        .styled-table tbody tr {
            border-bottom: 1px solid #dddddd;
        }

            .styled-table tbody tr:nth-of-type(even) {
                background-color: #f3f3f3;
            }

            .styled-table tbody tr:nth-of-type(odd) {
                background-color: white;
            }

            .styled-table tbody tr:last-of-type {
                border-bottom: 2px solid #009879;
            }


    .e-card {
        display: flex;
        width: 100%;
        margin: auto;
    }

    .e-card-step {
        background-color: lightgrey;
        display: flex;
        width: 100%;
        margin: auto;
    }

    .e-card-header-caption .e-card-header-title {
        font-size: 20px;
        font-family: Helvetica, 'Segoe UI';
        font-weight: bold;
    }

    .e-card-content {
        text-overflow: ellipsis;
        overflow: hidden;
        height: 50px;
    }

    .float-container {
        border: 3px solid #fff;
        padding: 20px;
    }

    .float-child {
        width: 33%;
        float: left;
        padding: 20px;
    }
</style>

@code {
    private UsuarioModel userModel = new();

    public Usuario user { get; set; }
    private string storedUserEmail { get; set; }
    private int idCarrito { get; set; }
    private int step { get; set; }
    private bool acceptCondiciones = false;
    private bool pedidoVacio { get; set; }
    private bool alertThatHasntAcceptCondiciones = false;

    private List<LineaCarritoModel>? lineaCarritoData { get; set; }
    private List<ProductoModel>? listaProductosCarrito { get; set; }
    private List<LineaCarritoModel>? filteredLineaCarritoData { get; set; }

    private string metodoDePago = "";

    private Pedido newPedido = new Pedido();

    protected override async Task OnInitializedAsync()
    {
        step = 1;
        await waitForUser();
        user = await UsuarioService.ReadUserbyEmail(storedUserEmail);
        idCarrito = await getIdCarrito(user);
        lineaCarritoData = await LineaCarritoService.GetLineaCarritos();
        filteredLineaCarritoData = await filtrarLineasCarrito(lineaCarritoData, user);
        listaProductosCarrito = await listaLineaCarritosToProductos(filteredLineaCarritoData);
        pedidoVacio = listaProductosCarrito.Count() < 1;
    }

    private async Task<string> waitForUser()
    {
        var result = await LocalStorage.GetAsync<string>("user");
        storedUserEmail = result.Success ? result.Value : null;

        return storedUserEmail;
    }

    private async Task<List<ProductoModel>> listaLineaCarritosToProductos(List<LineaCarritoModel> listaLineaCarritos)
    {
        var result = new List<ProductoModel>();
        try
        {
            if (listaLineaCarritos != null)
            {
                var listaProductos = await ProductoService.GetProductos();
                foreach (var linea in listaLineaCarritos)
                {
                    foreach (var producto in listaProductos)
                    {
                        if (linea.ProductoLineaCarrito == producto.ProductoId)
                        {
                            result.Add(producto);
                        }
                    }
                }
            }
            return result;
        }
        catch (Exception)
        {
            return result;
        }
    }

    private async Task<List<LineaCarritoModel>> filtrarLineasCarrito(List<LineaCarritoModel> listalc, Usuario usuario)
    {
        var result = new List<LineaCarritoModel>();
        foreach (var linea in listalc)
        {

            if (linea.CarritoLineaCarrito.ToString() == idCarrito.ToString())
            {
                result.Add(linea);
            }
        }
        return result;
    }

    private async Task<int> getIdCarrito(Usuario user)
    {
        try
        {
            return (await CarritoService.GetCarritoByUser(user.UsuarioId)).CarritoId;
        }
        catch (Exception)
        {
            throw;
        }
    }

    private int cantidadDeProducto(ProductoModel producto, List<LineaCarritoModel> lineaCarr)
    {
        foreach (var item in lineaCarr)
        {
            if (item.ProductoLineaCarrito == producto.ProductoId) return item.Cantidad;
        }
        return 0;
    }

    private double totalCarrito()
    {
        double result = 0;
        if (filteredLineaCarritoData != null && listaProductosCarrito != null)
        {
            foreach (var lincarr in filteredLineaCarritoData)
            {
                foreach (var producto in listaProductosCarrito)
                {
                    if (lincarr.ProductoLineaCarrito == producto.ProductoId)
                        result = result + (producto.Precio) * lincarr.Cantidad;
                }
            }
        }
        return Math.Round(result, 2);
    }

    private double totalPedido()
    {

        return (totalCarrito() + PedidoService.GetCosteEnvio());
    }

    private double totalProducto(double productoPrecio, int usuarioDescuento, int lineaCantidad)
    {
        double result = productoPrecio * lineaCantidad;

        result = result - ((result * usuarioDescuento) / 100);

        return Math.Round(result, 2);
    }

    public void RefreshState()
    {
        NavigationManager.NavigateTo("/refresh/compra");//this.StateHasChanged();
    }

    private async Task goToStep2()
    {
        if (acceptCondiciones)
        {
            alertThatHasntAcceptCondiciones = false;
            step = 2;

        }
        else
        {
            alertThatHasntAcceptCondiciones = true;
        }
    }

    private async Task goToStep3()
    {
        try
        {
            newPedido = await CreatePedido();
    await LineaCarritoService.DeleteAllLineasByCarrito(idCarrito);
        }
        catch (Exception)
        {
            throw;
        }
        step = 3;
    }

    protected async Task<Pedido> CreatePedido()
    {
        try
        {
            if (listaProductosCarrito.Count() > 0)
            {

                List<LineaPedido> lineasPedido = (from p in listaProductosCarrito
                                                  select new LineaPedido
                                                      {
                                                          ProductoLineaPedido = p.ProductoId,
                                                          PrecioFinal = totalProducto(p.Precio, user.Descuento, cantidadDeProducto(p, filteredLineaCarritoData)),
                                                          Cantidad = cantidadDeProducto(p, filteredLineaCarritoData)
                                                      }).ToList();
                PedidoModel pedidoModel = new PedidoModel
                    {
                        UsuarioPedido = user.UsuarioId,
                        LineasPedido = lineasPedido,
                        FechaPedido = DateTime.Now,
                        EstadoPedido = Constants.EstadosPedido.First()
                    };
                return await PedidoService.CreatePedido(pedidoModel);

            }
            return null;
        }
        catch (Exception)
        {
            // await this.ToastObj.ShowAsync(Toast[2]);
            throw;
        }
    }

    public async Task ExportToPdf()
    {
        using(MemoryStream memoryStream = ExportService.CreatePdf(newPedido, user, listaProductosCarrito, filteredLineaCarritoData, PedidoService.GetCosteEnvio())){
            await JS.SaveAs(newPedido.PedidoId.ToString()+newPedido.FechaPedido.ToShortDateString()+newPedido.FechaPedido.ToShortTimeString()+".pdf", memoryStream.ToArray());
        }
    }

}

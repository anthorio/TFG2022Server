@page "/admin"

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Syncfusion.Blazor.Buttons

@inject ProtectedLocalStorage LocalStorage
@inject IUsuarioService UsuarioService
@inject NavigationManager NavigationManager
@inject IProductoService ProductoService

@if (@storedUser != null && @storedUser.Rol == UsuarioService.GetRoles().First())
{
    NavigationManager.NavigateTo("/");
}
else if (@storedUser != null)
{
    <h3>Administración</h3>
    <main class="container">

        <div class="column">
            <h2>Artículos</h2>
            <div>
                <SfButton CssClass="btn" class="e-btn e-outline e-primary" @onclick="@(()=>NavigationManager.NavigateTo("/admin/Productos"))">Productos</SfButton>
            </div>
            <div>
                <SfButton CssClass="btn" class="e-btn e-outline e-primary" @onclick="@(()=>NavigationManager.NavigateTo("/admin/FamiliaProductos"))">Familias de productos</SfButton>
            </div>
        </div>
        <div class="column">
            <h2>Clientes</h2>
            <div>
                <SfButton CssClass="btn" class="e-btn e-outline e-primary" @onclick="@(()=>NavigationManager.NavigateTo("/admin/Clientes"))">Clientes</SfButton>
            </div>
            <div>
                <SfButton CssClass="btn" class="e-btn e-outline e-primary" @onclick="@(()=>NavigationManager.NavigateTo("/admin/Pedidos"))">Pedidos</SfButton>
            </div>
        </div>
        <div class="column">
            <h2>Proveedores</h2>
            <div>
                <SfButton CssClass="btn" class="e-btn e-outline e-primary" @onclick="@(()=>NavigationManager.NavigateTo("/admin/Proveedores"))">Proveedores</SfButton>
            </div>
        </div>
        <div class="column">
            <h2>Contabilidad</h2>
            <div>
                <SfButton CssClass="btn" class="e-btn e-outline e-primary" @onclick="@(()=>NavigationManager.NavigateTo("/admin/VentaFisica"))">🛒 Venta física</SfButton>
            </div>
            <div>
                <SfButton CssClass="btn" class="e-btn e-outline e-primary" @onclick="@(()=>NavigationManager.NavigateTo("/admin/Albaranes"))">Albaranes</SfButton>
            </div>
            <div>
                <SfButton CssClass="btn" class="e-btn e-outline e-primary" @onclick="@(()=>NavigationManager.NavigateTo("/admin/PagosFacturas"))">Pagos y Facturas</SfButton>
            </div>
        </div>
        <div class="column">
            <h2>Gestión</h2>
            <div>
                <SfButton CssClass="btn" class="e-btn e-outline e-primary" @onclick="@(()=>NavigationManager.NavigateTo("/admin/Empleados"))">Empleados</SfButton>
            </div>
            <div>
                <SfButton CssClass="btn" class="e-btn e-outline e-primary" @onclick="@(()=>NavigationManager.NavigateTo(""))">Análisis y estadísticas</SfButton>
            </div>
        </div>

    </main>
    <hr />

    @if (productoData != null)
    {
        <table class="styled-table">
            <thead>
                <tr>
                    <th>Notificaciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (ProductoModel prod in productoData)
                {
                    if (prod.Cantidad < prod.StockMinimo)
                    {
                        <tr>
                            <td>
                                <text>El producto '@prod.Nombre' con ID: '@prod.ProductoId' está por debajo del stock mínimo (@prod.StockMinimo). Actualmente: @prod.Cantidad.</text>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    }
}

<style>
    .styled-table {
        border-collapse: collapse;
        margin: 25px 0;
        font-size: 0.9em;
        font-family: sans-serif;
        min-width: 400px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.15);
        background-color: white;
    }

        .styled-table thead tr {
            background-color: #009879;
            color: #ffffff;
            text-align: left;
        }

        .styled-table th,
        .styled-table td {
            padding: 12px 15px;
            max-width: 0;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        .styled-table tbody tr {
            border-bottom: 1px solid #dddddd;
        }

            .styled-table tbody tr:nth-of-type(even) {
                background-color: #f3f3f3;
            }

            .styled-table tbody tr:nth-of-type(odd) {
                background-color: white;
            }

            .styled-table tbody tr:last-of-type {
                border-bottom: 2px solid #009879;
            }
    /* Basic Styling */
    html, body {
        height: 100%;
        width: 100%;
        margin: 0;
        font-family: 'Roboto', sans-serif;
    }

    .container {
        max-width: 1600px;
        margin: 0 auto;
        padding: 15px;
        display: flex;
    }
    /* Columns */
    .column {
        width: 20%;
        position: relative;
    }
    /*Buttons*/
    .btn {
        margin-top: 5px;
    @* border-radius: 0; height: 24px; background-color: #007BFF; *@ width: 90%;
    }
</style>

@code {
    private Usuario? storedUser { get; set; }
    private List<ProductoModel>? productoData { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await InicializarUsuario();
    }

    protected async Task InicializarUsuario()
    {
        productoData = await ProductoService.GetProductos();
        await Task.Delay(1000);
        var result = await LocalStorage.GetAsync<string>("user");
        await Task.Delay(500);
        var storedUserEmail = result.Success ? result.Value : null;
        if (storedUserEmail != null) storedUser = await UsuarioService.ReadUserbyEmail(storedUserEmail);
    }
    protected void testF()
    {

    }
}

@page "/admin/Pedidos"

@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Spinner
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using TFG2022Server.Data
@using TFG2022Server.Extensions
@using System.IO;
@using TFG2022Server.Pages.Components


@inject NavigationManager NavigationManager
@inject ProtectedLocalStorage LocalStorage
@inject IUsuarioService UsuarioService
@inject IPedidoService PedidoService
@inject ILineaPedidoService LineaPedidoService
@inject IProductoService ProductoService
@inject ExportService exportService
@inject Microsoft.JSInterop.IJSRuntime JS

@if (@storedUser != null && @storedUser.Rol == UsuarioService.GetRoles().First())
{
    NavigationManager.NavigateTo("/");
}
else if (@storedUser != null)
{
    <SfButton CssClass="btn" class="e-btn e-outline e-primary" @onclick="@(()=>NavigationManager.NavigateTo("/admin"))">⬅ Volver a la página anterior</SfButton>
    <hr />
    <h3>Lista de Pedidos</h3>

    <div>
        <SfGrid @ref="@Grid" DataSource="pedidoData" AllowResizing="true" AllowPaging="true" AllowSorting="true" AllowFiltering="true" AllowGrouping="true" Toolbar="@toolbar">
            <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
            <GridEditSettings AllowAdding="false" AllowEditing="true" AllowDeleting="false"></GridEditSettings>
            <GridEvents RowSelected="GetSelectedRecords" OnActionBegin="ActionBeginHandler" OnActionComplete="ActionCompleteHandler" TValue="PedidoModel"></GridEvents>
            <GridPageSettings PageSize="15"></GridPageSettings>
            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
            <GridColumns>
                <GridColumn IsPrimaryKey="true" Field="@nameof(PedidoModel.PedidoId)" HeaderText="ID" AllowAdding="false" AllowEditing="false"></GridColumn>
                <GridForeignColumn Field="@nameof(PedidoModel.UsuarioPedido)" HeaderText="Usuario"
                               ForeignKeyValue="Nombre" ForeignKeyField="UsuarioId" ForeignDataSource="usuariosData" AllowEditing="false"></GridForeignColumn>
                <GridColumn Field="@nameof(PedidoModel.FechaPedido)" Format="d" HeaderText="Fecha del pedido" AllowEditing="false"></GridColumn>
                <GridColumn Field="@nameof(PedidoModel.EstadoPedido)" EditType="EditType.DropDownEdit" HeaderText="Estado del pedido">
                    <EditTemplate>
                        <SfDropDownList ID="Rol" DataSource="@((Constants.EstadosPedido).ToList())" TItem="string" TValue="string" @bind-Value="@((context as PedidoModel).EstadoPedido)">
                            <DropDownListFieldSettings Value="EstadoPedido"></DropDownListFieldSettings>
                            <DropDownListEvents TValue="string" TItem="string"></DropDownListEvents>
                        </SfDropDownList>
                    </EditTemplate>
                </GridColumn>
                <GridColumn Field="@nameof(PedidoModel.Envio)" HeaderText="Es un envío" AllowEditing="false"></GridColumn>
                <GridColumn Field="@nameof(PedidoModel.PrecioTotal)" HeaderText="Precio total" AllowEditing="false"></GridColumn>
                <GridColumn Field="@nameof(PedidoModel.CantidadTotal)" HeaderText="Productos totales" AllowEditing="false"></GridColumn>

            </GridColumns>
            <SfSpinner @bind-Visible="@VisibleSpinner"></SfSpinner>
        </SfGrid>
    </div>


    @if (productosData != null)
    {
        <table class="styled-table">
            <thead>
                <tr>
                    <th>Producto</th>
                    <th>Cantidad</th>
                    <th>Precio</th>
                    <th>Total</th>

                </tr>
            </thead>
            <tbody>
                @foreach (LineaPedidoModel lpm in lineaPedidoData)
                    @foreach (Producto prod in productosData)
                    {
                        if (lpm.ProductoLineaPedido == prod.ProductoId)
                        {
                            <tr>
                                <td>
                                    <img src="@prod.UrlImagen" height="40"> <text style="text-overflow: ellipsis">@prod.Nombre</text>
                                </td>
                                <td>
                                    <text>@lpm.Cantidad</text>
                                </td>
                                <td>
                                    <text>@(lpm.PrecioFinal/lpm.Cantidad)</text>
                                </td>
                                <td>
                                    <text> @lpm.PrecioFinal €</text>
                                </td>
                            </tr>
                        }
                    }
            </tbody>
        </table>
        <ExportFacturaButton pedido="@SelectedPedidoModel.Convert()"></ExportFacturaButton>

    }
}

<style>
    .styled-table {
        border-collapse: collapse;
        margin: 25px 0;
        font-size: 0.9em;
        font-family: sans-serif;
        min-width: 400px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.15);
        background-color: white;
    }

        .styled-table thead tr {
            background-color: #009879;
            color: #ffffff;
            text-align: left;
        }

        .styled-table th,
        .styled-table td {
            padding: 12px 15px;
            max-width: 0;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        .styled-table tbody tr {
            border-bottom: 1px solid #dddddd;
        }

            .styled-table tbody tr:nth-of-type(even) {
                background-color: #f3f3f3;
            }

            .styled-table tbody tr:nth-of-type(odd) {
                background-color: white;
            }

            .styled-table tbody tr:last-of-type {
                border-bottom: 2px solid #009879;
            }
</style>

@code {
    SfGrid<PedidoModel> Grid { get; set; }
    private Usuario storedUser { get; set; }
    private List<PedidoModel>? pedidoData { get; set; }
    private bool VisibleSpinner { get; set; } = false;
    private int SelectedPedidoModelId { get; set; }
    private PedidoModel SelectedPedidoModel { get; set; }
    private List<object> toolbar = new List<object> { "Edit", "Update", "Search" };

    private List<LineaPedidoModel>? lineaPedidoData { get; set; }
    private List<Producto>? productosData { get; set; }
    private List<UsuarioModel>? usuariosData { get; set; }


    protected override async Task OnInitializedAsync()
    {
        VisibleSpinner = true;
        await InicializarUsuario();
        pedidoData = await PedidoService.GetPedidos();
        usuariosData = await UsuarioService.GetAllUsuarios();
        VisibleSpinner = false;
    }
    protected async Task InicializarUsuario()
    {
        var result = await LocalStorage.GetAsync<string>("user");
        var storedUserEmail = result.Success ? result.Value : null;
        if (storedUserEmail != null) storedUser = await UsuarioService.ReadUserbyEmail(storedUserEmail);
    }
    private async Task GetSelectedRecords(RowSelectEventArgs<PedidoModel> args)
    {
        SelectedPedidoModel = args.Data;
        SelectedPedidoModelId = SelectedPedidoModel.PedidoId;
        lineaPedidoData = (await LineaPedidoService.GetLineaPedidos()).FindAll(e => e.PedidoLineaPedido == SelectedPedidoModelId);
        productosData = await lineasPedidoToProductos(lineaPedidoData);
    }
    private async Task<string> LineaPedidoToProduct(LineaPedidoModel lineaPed)
    {
        return (await ProductoService.GetProducto(lineaPed.ProductoLineaPedido)).Nombre;
    }

    private async Task<List<Producto>> lineasPedidoToProductos(List<LineaPedidoModel> lineas)
    {
        var allProds = await ProductoService.GetProductos();
        var result = new List<Producto>();
        foreach (var linea in lineas)
        {
            result.Add(await ProductoService.GetProducto(linea.ProductoLineaPedido));
        }
        return result;
    }
    /*
    public async Task ExportToPdf()
    {
        Usuario selectedDataUser = ((await UsuarioService.GetAllUsuarios()).FindAll(e => e.UsuarioId == SelectedPedidoModel.UsuarioPedido).First()).Convert();
        using (MemoryStream memoryStream = ExportService.CreatePdfPedido(SelectedPedidoModel, selectedDataUser, productosData, lineaPedidoData, PedidoService.GetCosteEnvio()))
        {
            await JS.SaveAs(SelectedPedidoModel.PedidoId.ToString() + SelectedPedidoModel.FechaPedido.ToShortDateString() + SelectedPedidoModel.FechaPedido.ToShortTimeString() + ".pdf", memoryStream.ToArray());
        }
    }*/

    public async void ActionBeginHandler(ActionEventArgs<PedidoModel> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if (args.Action == "Edit")
            {
                await PedidoService.UpdatePedido(args.Data);
            }
        }
    }
    public async void ActionCompleteHandler(ActionEventArgs<PedidoModel> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if (args.Action == "Add")
            {
                pedidoData = await PedidoService.GetPedidos();
                Grid?.Refresh();
            }
        }
    }
}

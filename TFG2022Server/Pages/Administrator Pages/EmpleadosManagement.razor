@page "/admin/Empleados"

@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Spinner
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Syncfusion.Blazor.Buttons

@inject ProtectedLocalStorage LocalStorage
@inject IUsuarioService UsuarioService
@inject NavigationManager NavigationManager

@if (@storedUser != null && @storedUser.Rol == UsuarioService.GetRoles().First())
{
    NavigationManager.NavigateTo("/");
}
else if (@storedUser != null)
{
    if (EmpleadoData != null)
    {
        <h3>Empleados</h3>

        <div>
            <SfGrid @ref="SfEmpleadoGrid" DataSource="EmpleadoData" AllowPaging="true" AllowSorting="true" AllowFiltering="true" AllowGrouping="true" Toolbar="@toolbar" AllowResizing="true">
                <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true"></GridEditSettings>
                <GridEvents OnActionBegin="ActionBeginHandler" OnActionComplete="ActionCompleteHandler" TValue="UsuarioModel"></GridEvents>
                <GridPageSettings PageSize="20"></GridPageSettings>
                <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
                <GridColumns>
                    <GridColumn Field="@nameof(UsuarioModel.UsuarioId)" AllowAdding="false" AllowEditing="false" IsPrimaryKey="true" HeaderText="ID"></GridColumn>
                    <GridColumn Field="@nameof(UsuarioModel.Nombre)" HeaderText="Nombre"></GridColumn>
                    <GridColumn Field="@nameof(UsuarioModel.Apellidos)" HeaderText="Apellidos"></GridColumn>
                    <GridColumn Field="@nameof(UsuarioModel.Rol)" EditType="EditType.DropDownEdit">
                        <EditTemplate>
                            <SfDropDownList ID="Rol" DataSource="@rolUsuarioData" TItem="string" TValue="string" @bind-Value="@((context as UsuarioModel).Rol)">
                                <DropDownListFieldSettings Value="Rol"></DropDownListFieldSettings>
                                <DropDownListEvents TValue="string" TItem="string"></DropDownListEvents>
                            </SfDropDownList>
                        </EditTemplate>
                    </GridColumn>
                    <GridColumn Field="@nameof(UsuarioModel.Email)"></GridColumn>
                    <GridColumn Field="@nameof(UsuarioModel.Contraseña)"></GridColumn>
                    <GridColumn Field="@nameof(UsuarioModel.Telefono)" HeaderText="Teléfono"></GridColumn>
                    <GridColumn Field="@nameof(UsuarioModel.Dni)" HeaderText="DNI"></GridColumn>
                    <GridColumn Field="@nameof(UsuarioModel.FechaNacimiento)" Format="d" HeaderText="Fecha de Nacimiento"></GridColumn>
                    <GridColumn Field="@nameof(UsuarioModel.Direccion)" HeaderText="Dirección"></GridColumn>
                    <GridColumn Field="@nameof(UsuarioModel.Poblacion)" HeaderText="Población"></GridColumn>
                    <GridColumn Field="@nameof(UsuarioModel.CodigoPostal)" HeaderText="Código Postal"></GridColumn>
                </GridColumns>
                <SfSpinner @bind-Visible="@VisibleSpinner"></SfSpinner>
            </SfGrid>
        </div>
    }
}

@code {
    private List<UsuarioModel>? EmpleadoData { get; set; }
    private List<string>? rolUsuarioData { get; set; }
    private SfGrid<UsuarioModel>? SfEmpleadoGrid { get; set; }

    private List<object> toolbar = new List<object> { "Add", "Edit", "Delete", "Update", "Cancel", "Search" };
    private bool VisibleSpinner { get; set; } = false;
    private Usuario? storedUser { get; set; }

    protected override async Task OnInitializedAsync()
    {
        VisibleSpinner = true;
        rolUsuarioData = (UsuarioService.GetRoles()).ToList();
        EmpleadoData = (await UsuarioService.GetAllUsuarios()).FindAll(e => e.Rol != rolUsuarioData.First());
        await Task.Delay(1000);
        var result = await LocalStorage.GetAsync<string>("user");
        await Task.Delay(500);
        var storedUserEmail = result.Success ? result.Value : null;
        if (storedUserEmail != null) storedUser = await UsuarioService.ReadUserbyEmail(storedUserEmail);
        VisibleSpinner = false;
    }

    public async void ActionBeginHandler(ActionEventArgs<UsuarioModel> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if (args.Action == "Add")
            {
                await UsuarioService.AddUsuario(args.Data);
            }
            else if (args.Action == "Edit")
            {
                await UsuarioService.UpdateUsuario(args.Data);
            }
        }
        else if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            await UsuarioService.DeleteUsuario(args.Data.UsuarioId);
        }
    }
    public async void ActionCompleteHandler(ActionEventArgs<UsuarioModel> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if (args.Action == "Add")
            {
                EmpleadoData = (await UsuarioService.GetAllUsuarios()).FindAll(e => e.Rol == rolUsuarioData.First());
                SfEmpleadoGrid?.Refresh();
            }
        }
    }
}

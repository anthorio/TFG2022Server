@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Cards
@using TFG2022Server.Extensions

@inject NavigationManager NavigationManager
@inject ILineaCarritoService LineaCarritoManagementService
@inject ICarritoService CarritoService
@inject IProductoService ProductoService

@if (@user == null)
{

    <SfTooltip Position="Syncfusion.Blazor.Popups.Position.TopLeft" Height=100px Width=300px>
        <TooltipTemplates>
            <Content>
                <div class='content'>
                    <h3 style='margin-top: 5px;'>Inicia sesión primero</h3>
                </div>
            </Content>
        </TooltipTemplates>
        @* Initializes the Button component *@
        <SfButton CssClass="e-outline" IsPrimary="true" Content="Carrito" @onclick="refresh"></SfButton>
    </SfTooltip>

}
else
{


    <SfTooltip Position="Syncfusion.Blazor.Popups.Position.TopLeft" Height=600px Width=300px IsSticky=true>
        <TooltipTemplates>
            <Content>
                <div class='content'>
                    <h3 style='margin-top: 5px;'>🛒 Tu carrito</h3><hr>
                    <div>
                        @if (@user != null && @listaProductosCarrito != null)
                        {
                            <div class="grid-container">
                                @foreach (ProductoModel producto in listaProductosCarrito)
                                {
                                    <div class="row">
                                        <div class="column left">
                                            <img src="@producto.UrlImagen" height="40">
                                        </div>
                                        <div class="column right">
                                            <div>
                                                @producto.Nombre
                                            </div>
                                            <div>
                                                @cantidadDeProducto(@producto, @filteredLineaCarritoData) x @FinalPriceCalculator.FinalPrice(producto) €
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                    <div style='margin-top: 20px;'></div>
                    <table>
                        <tr>
                            <th style="color:lightgray">Total (IVA incluido)</th>
                            <th style="color:lightgray">@totalCarrito() €</th>
                        </tr>
                    </table>

                    <div style='margin-top: 20px;'></div>
                    <SfButton CssClass="e-outline" Content=@contenidoBoton() Disabled=@(listaProductosCarrito.Count<1) @onclick="@(()=>NavigationManager.NavigateTo("/compra"))" />
                </div>
            </Content>
        </TooltipTemplates>
        @* Initializes the Button component *@
        <SfButton CssClass="e-outline" IsPrimary="true" Content="Carrito" @onclick="refresh"></SfButton>
    </SfTooltip>
}

<style>
    .listview-template {
        border-radius: 2px;
        height: 300px;
        box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);
        padding: 20px;
    }

    table {
        font-family: arial, sans-serif;
        border: 1px solid #dddddd;
        background-color: #424242;
        border-collapse: collapse;
        width: 100%;
        font-c
    }

    .img-class {
        height: 2px;
    }

    .column {
        float: left;
    }

    .left {
        width: 25%;
    }

    .right {
        width: 75%;
    }

    /*Grid Related*/
    .grid-container {
        display: grid;
        grid-template-columns: 300px, 1fr;
        gap: 20px;
    }
</style>

@code {
    private List<LineaCarritoModel>? lineaCarritoData { get; set; }
    private List<LineaCarritoModel>? filteredLineaCarritoData { get; set; }
    private List<ProductoModel>? listaProductosCarrito { get; set; }
    private int idCarrito { get; set; }

    [Parameter]
    public Usuario user { get; set; }


    protected override async Task OnInitializedAsync()
    {
        lineaCarritoData = new List<LineaCarritoModel>();
        filteredLineaCarritoData = new List<LineaCarritoModel>();
        listaProductosCarrito = new List<ProductoModel>();

        await refresh();
    }


    private async Task<List<LineaCarritoModel>> filtrarLineasCarrito(List<LineaCarritoModel> listalc, Usuario usuario)
    {
        var result = new List<LineaCarritoModel>();
        foreach (var linea in listalc)
        {

            if (linea.CarritoLineaCarrito.ToString() == idCarrito.ToString())
            {
                result.Add(linea);
            }
        }
        return result;
    }

    private async Task<List<ProductoModel>> listaLineaCarritosToProductos(List<LineaCarritoModel> listaLineaCarritos)
    {
        var result = new List<ProductoModel>();
        try
        {
            if (listaLineaCarritos != null)
            {
                var listaProductos = await ProductoService.GetProductos();
                foreach (var linea in listaLineaCarritos)
                {
                    foreach (var producto in listaProductos)
                    {
                        if (linea.ProductoLineaCarrito == producto.ProductoId)
                        {
                            result.Add(producto);
                        }
                    }
                }
            }
            return result;
        }
        catch (Exception)
        {
            return result;
        }
    }

    private async Task refresh()
    {
        try
        {
            if (user != null)
            {
                idCarrito = await getIdCarrito(user);
                lineaCarritoData = await LineaCarritoManagementService.GetLineaCarritos();
                filteredLineaCarritoData = await filtrarLineasCarrito(lineaCarritoData, user);
                listaProductosCarrito = await listaLineaCarritosToProductos(filteredLineaCarritoData);
                StateHasChanged();
            }
        }
        catch (Exception)
        {
            throw;
        }
    }


    private async Task<int> getIdCarrito(Usuario user)
    {
        try
        {
            return (await CarritoService.GetCarritoByUser(user.UsuarioId)).CarritoId;
        }
        catch (Exception)
        {
            throw;
        }
    }

    private int cantidadDeProducto(ProductoModel producto, List<LineaCarritoModel> lineaCarr)
    {
        foreach (var item in lineaCarr)
        {
            if (item.ProductoLineaCarrito == producto.ProductoId) return item.Cantidad;
        }
        return 0;
    }

    private double totalCarrito()
    {
        double result = 0;
        if (filteredLineaCarritoData != null && listaProductosCarrito != null)
        {
            foreach (var lincarr in filteredLineaCarritoData)
            {
                foreach (var producto in listaProductosCarrito)
                {
                    if (lincarr.ProductoLineaCarrito == producto.ProductoId)
                        result = result + (FinalPriceCalculator.FinalPrice(producto)) * lincarr.Cantidad;
                }
            }
        }
        return Math.Round(result, 2);
    }

    private string contenidoBoton()
    {
        if (totalCarrito() > 0) return "Comprar";
        else return "Carrito vacío";
    }


}

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using TFG2022Server.Pages.Components
@using Syncfusion.Blazor.Buttons
@using TFG2022Server.Data
@using TFG2022Server.Extensions
@using System.IO;

@inject ProtectedLocalStorage LocalStorage
@inject NavigationManager NavigationManager
@inject ILineaPedidoService LineaPedidoService
@inject ICarritoService CarritoService
@inject IProductoService ProductoService
@inject IProveedorService ProveedorService
@inject IUsuarioService UsuarioService
@inject IPedidoService PedidoService
@inject IFacturaService FacturaService
@inject ExportService exportService
@inject Microsoft.JSInterop.IJSRuntime JS

<SfButton @onclick="@ExportToPdf">Imprimir albarán</SfButton>

@code {
    [Parameter]
    public AlbaranModel albaran { get; set; }
    public UsuarioModel user;
    public List<LineaPedidoModel> lineasPedido;
    public List<ProductoModel> productos;
    public ProveedorModel proveedor;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            PedidoModel pedido = (await PedidoService.GetPedidos()).FindAll(e => e.PedidoId == albaran.PedidoAlbaran).First();
            user = (await UsuarioService.GetAllUsuarios()).FindAll(e => e.UsuarioId == pedido.UsuarioPedido).First();
            lineasPedido = (await LineaPedidoService.GetLineaPedidos()).FindAll(e => e.PedidoLineaPedido == albaran.PedidoAlbaran);
            productos = (await ProductoService.GetProductos());
        }
        catch (Exception)
        {
            lineasPedido = new List<LineaPedidoModel>();
            productos = new List<ProductoModel>();
        }
        try
        {
            int proveedorProducto = productos.FindAll(e => e.ProductoId == albaran.ProductoAlbaran).First().ProveedorProducto;
            proveedor = (await ProveedorService.GetProveedores()).FindAll(e => e.ProveedorId == proveedorProducto).First();
        }
        catch (Exception)
        {
            proveedor = new ProveedorModel();
        }
    }

    protected async Task refresh()
    {
            productos = (await ProductoService.GetProductos());
        try
        {
            PedidoModel pedido = (await PedidoService.GetPedidos()).FindAll(e => e.PedidoId == albaran.PedidoAlbaran).First();
            user = (await UsuarioService.GetAllUsuarios()).FindAll(e => e.UsuarioId == pedido.UsuarioPedido).First();
            lineasPedido = (await LineaPedidoService.GetLineaPedidos()).FindAll(e => e.PedidoLineaPedido == albaran.PedidoAlbaran);
        }
        catch (Exception)
        {
            lineasPedido = new List<LineaPedidoModel>();
        }
        try
        {
            int proveedorProducto = productos.FindAll(e => e.ProductoId == albaran.ProductoAlbaran).First().ProveedorProducto;
            proveedor = (await ProveedorService.GetProveedores()).FindAll(e => e.ProveedorId == proveedorProducto).First();
        }
        catch (Exception)
        {
            proveedor = new ProveedorModel();
        }
    }


    public async Task ExportToPdf()
    {
        await refresh();
        using (MemoryStream memoryStream = ExportService.CreateAlbaran(albaran, user, productos, lineasPedido, proveedor))
        {
            await JS.SaveAs(albaran.FechaEntrega.ToShortDateString() + "_" + albaran.FechaEntrega.ToShortTimeString() + "_" + albaran.AlbaranId.ToString() + ".pdf", memoryStream.ToArray());
        }
    }
}
